---
title: Updating Identity Providers with UAAC
owner: Identity Service
---

This topic describes how to update the configuration of identity providers 
using the User Account and Authentication Command Line Interface (UAAC). 
For instructions on configuring identity providers, see [Configuring Identity Providers](./configure-id-providers.html).

## <a id="creating"></a> Create a UAA Identity Zone Admin Client

To use the UAA identity provider API for your SSO service plan, you need a special identity zone admin client.

1. Create a UAA identity zone admin client.

    <br>For instructions, see [Create a UAA Identity Zone Admin Client](./manage-clients-api.html#creating).

2. Using the instructions above, give this client the `idps.read` and `idps.write` scopes.

3. Record the **App ID** and **App Secret**. You will need these for the procedure below.


## <a id="updating"></a> Update UAA Identity Provider Configurations with the API

This section shows how to use the UAAC to update UAA identity provider configurations, using a `PUT` command.

<p class="note warning"><strong>WARNING</strong>: This flow is for advanced users only. You must always run the <code>PUT</code> command
  with the latest data by doing a <code>GET</code> before the <code>PUT</code> command.
  You must also provide all configuration values, otherwise, data may be lost.</p>

For general information about UAAC, see the [CF UAA API documentation page](https://docs.cloudfoundry.org/api/uaa).

To make UAA identity provider API calls:

1. Fetch a token using the identity zone admin client created above.

  1. Target the authdomain specified in your Service Plan. For example:

        <pre class="terminal">
        $ uaac target my-auth-doman.login.example.com
        </pre>
  1. Obtain an access token using this command: 

        ```
        uaac token client get ZONE-ADMIN-CLIENT-ID
        ```
        Where:
        * `ZONE-ADMIN-CLIENT-ID` is **App ID** you recorded in the procedure above.

1. When prompted for the client secret, provide the **App Secret** you recorded in the procedure above.

2. Retrieve the information for the identity provider you want to change, using one of the commands below. <br><br>
  * If you know your identity provider ID, use it in the following command, directing the output to a text file. For example:

        <pre class="terminal">
        $ uaac curl -k /identity-providers/YOUR-IDENTITY-PROVIDER-ID > file.txt
        </pre>
  * If you do not know your identity provider ID, use the following command, directing the output to a text file. For example:

        <pre class="terminal">
        $ uaac curl -k /identity-providers > file.txt
        </pre>

        Scan `file.txt` to determine your identity provider ID.

3. The step above outputs a JSON blob similar
to the example below. Confirm that the ID in this output matches `YOUR-IDENTITY-PROVIDER-ID`.

	```
	{
      "type": "uaa",
      "config": "{\"emailDomain\":null,\"additionalConfiguration\":null,\"providerDescription\":null,\"passwordPolicy\":null,\"lockoutPolicy\":null,\"disableInternalUserManagement\":false}",
      "id": "YOUR-IDENTITY-PROVIDER-ID",
      "originKey": "uaa",
      "name": "uaa",
      "version": 0,
      "created": 1530220213000,
      "last_modified": 1530220213000,
      "active": true,
      "identityZoneId": "234b8106-acc5-41e9-8c7d-9cdc68c8f123"
    }
	```

4. In your `file.txt`, update the configurations in the JSON blob as needed, and then save the file.
  <p class="note warning"><strong>WARNING</strong>: You must provide all <code>config</code> values, otherwise,
    data may be lost when doing an API update as a <code>PUT</code> command.</p>

5. Submit a UAAC curl request to apply your updated configurations to the identity provider. Examples are shown below.
    <p class="note warning"><strong>WARNING</strong>: You must always run this command
      with the latest data by doing a <code>GET</code> before a <code>PUT</code> command.</p>

    <pre class="terminal">
    $ uaac curl -k /identity-providers/YOUR-IDENTITY-PROVIDER-ID -X PUT -H 'Content-Type: application/json' -d "$(cat file.txt)"
    </pre>

     A minimal example command would look similar to the following:

     <pre class="terminal">$ uaac curl -k /identity-providers/YOUR-IDENTITY-PROVIDER-ID \
         -X PUT \
         -H 'Content-Type: application/json' \
         -d '{
             "type": "uaa",
             "config": {
                 "emailDomain": null,
                 "providerDescription": null,
                 "passwordPolicy": null,
                 "lockoutPolicy": {
                     "lockoutPeriodSeconds": 8,
                     "lockoutAfterFailures": 8,
                     "countFailuresWithin": 8
                 },
                 "disableInternalUserManagement": false
             },
             "originKey": "uaa",
             "name": "uaa",
             "version": 3,
             "active": true
             }'
     </pre>

   For a full list of UAA API update parameters, see the [Identity Providers Update Documentation](http://docs.cloudfoundry.org/api/uaa/version/4.19.0/index.html#update)

### <a id="enable-client-auth"></a> Enable Client Auth for OpenID Connect (OIDC)

Some OIDC providers only support client secrets via POST instead of via basic authentication.

In these cases, Client Auth can be configured using `config.clientAuthInBody` in the request body. For information
about this field, see the [UAA documentation](http://docs.cloudfoundry.org/api/uaa/version/4.14.0/#oauth-oidc).

<p class="note"><strong>Note</strong>: Azure Active Directory integrations using the response type of code only work with clientAuthInBody.</p>

### <a id="skip-ssl-saml"></a> Skip SSL Validation for SAML

<p class="note"><strong>Note</strong>: This section assumes you have created the SAML Identity Provider, most likely
by providing the SAML metadata directly. For more information, see <a href="./configure-id-providers.html#config-saml-prov"> Add a SAML Provider</a>. </p>

For cases where the SAML provider is configured using a valid SAML URL, you may need to skip SSL validation on a self-signed certificate.

You can configure skipping SSL for SAML Identity Providers using `config.skipSslValidation` in the
request body. For documentation about this field, see the
[UAA documentation]( http://docs.cloudfoundry.org/api/uaa/version/4.14.0/#saml).
