---
title: Managing Users
owner: Identity Service
---

This topic describes how a Plan Administrator<%# |Admin| is preferred. %> uses
<%= vars.product_full %> to manage user access to <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) apps,
for users with accounts in external identity providers.

## <a id="external"></a> Manage Users from an External Identity Provider

For each external identity provider that <%= vars.product_short %> connects to,
a users admin pane lets you browse, delete, and update permissions
for user accounts from external identity providers. For example, **Okta SSO Users**.

To open the external identity provider users admin pane:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN`
using your User Account and Authentication (UAA) admin credentials.
You can find these credentials in your <%= vars.app_runtime_abbr %> tile in <%= vars.ops_manager %> under the **Credentials** tab.

1. Click the plan name.

1. Click the external identity provider you want to manage, then select the <your idp name> **Users** tab.
This brings you to the users admin pane for that external identity provider.
![External Identity Provider Users Page](images/manage_users.png)<%# Alt text must describe the image in detail. %><%# Images require alt text that describes the image in detail. %>

From the external identity provider users admin pane, you can:

* **Search** existing users by entering a value into the search bar and clicking **Search**.
Entering a blank value returns all users in the service plan internal user store.

* **Delete a user** by selecting the checkbox next to their username and clicking **Delete User(s)**.

* **View information about a user** and their **user permissions** by clicking on a username.
![User Profile and Permissions](images/user_details.png)<%# Alt text must describe the image in detail. %><%# Images require alt text that describes the image in detail. %>

* **Update user permissions** by typing the corresponding permissions into the search field, clicking enter, then clicking **Update User Permissions**.

## <a id="uaac"></a> Manage Users with the UAA CLI

You may<%# |can| usually works better. Use |might| to convey possibility. %> also use the UAA CLI, or [UAAC](https://github.com/cloudfoundry/cf-uaac),<%# Type |in GitHub| somewhere in the cross-reference sentence. %>
to manage users for <%= vars.product_short %>.
You can use this approach to programmatically create new internal users or assign
groups (scopes) to any user (whether internal or external).
These operations require administrative access through an admin client that must
be configured by<%# Active voice is preferred. %> an admin for the service plan.

<p class="note"><strong>Note</strong>:
  Clients and Groups for <%= vars.product_short %> should be created directly using
  the <%= vars.operator_dash %> or through app manifest bootstrapping.
  Do not create these through UAAC, as additional metadata is required for their
  usage by <%= vars.product_short %>.
</p>

1. Install the UAA CLI, `uaac`, by running:

    ```
    gem install cf-uaac
    ```

1. Target your service plan by running:

    ```
    uaac target AUTH-DOMAIN.login.SYSTEM-DOMAIN
    ```
    Where `AUTH-DOMAIN` is the **Auth Domain** you entered in [Create or Edit Service Plans](./manage-service-plans.html#create-svc-plan).
    <br><br>
    For example:
    <pre class="terminal">
    $ uaac target my-auth-domain.login.example.com
    </pre>

1. Record the **App ID** and **App Secret** from your admin client created by
following the steps in [Create Admin Client](./config-apps.html#admin).
You must give your admin client `scim.read` to read user information.
You can give your admin client either `scim.write` to create users and modify group (scope)
memberships or `scim.create` to only create users.

1. Authenticate and obtain an access token for the admin client for your service plan by running:

    ```
    uaac token client get ADMIN-APP<%# |APP-NAME| is preferred. %>-ID -s ADMIN-APP<%# |APP-NAME| is preferred. %>-SECRET
    ```

    Where:
    * `ADMIN-APP<%# |APP-NAME| is preferred. %>-ID` is your **App ID** and
    * `ADMIN-APP<%# |APP-NAME| is preferred. %>-SECRET` is your **App Secret**.

    For example:
    <pre class="terminal">
    $ uaac token client get MyAdminAppId -s MyAdminAppSecret
    </pre>

    UAAC stores the token in `~/.uaac.yml`.

1. Display the client context by running the following command<%# Replace with just |run:| %> and  verify that you have the sufficient `scim.write`
or `scim.create` permissions under the `scope` section:

    ```
    uaac context
    ```

    For example:
    <pre class="terminal">
    $ uaac context

    [1]*[admin]
      client\_id: MyAdminAppId
        access\_token: aBcdEfg0hIJKlm123.e
        token\_type: bearer
        expires\_in: 43200
        scope: scim.read scim.write
        jti: 91b3-abcd1233
    </pre>

1. Create a new internal user by running:

    ```
    uaac user add NEW-USERNAME -p NEW-PASSWORD --emails NEW-EMAIL
    ```<%# Define any non-obvious placeholders present in the code snippet in the style of |Where PLACEHOLDER is...| %>
    Replace `NEW-USERNAME`, `NEW-PASSWORD`, and `NEW-EMAIL` with appropriate information.
    <br><br>
    For example:
    <pre class="terminal">
    $ uaac user add Adam -p newSecretPassword --emails adam<span>@</span>example.com
    </pre>

1. Add any group to any user (internal or external) by running:

    ```
    uaac member add GROUP USERNAME
    ```<%# Define any non-obvious placeholders present in the code snippet in the style of |Where PLACEHOLDER is...| %>
    Replace `GROUP` and `USERNAME` with appropriate information.
    <br><br>
    For example:
    <pre class="terminal">
    $ uaac member add my-app.my-scope Adam
    </pre>

1. Delete any group from to any user (internal or external).

    ```
    uaac member delete GROUP USERNAME
    ```<%# Define any non-obvious placeholders present in the code snippet in the style of |Where PLACEHOLDER is...| %>
    Replace `GROUP` and `USERNAME` with appropriate information.
    <br><br>
    For example:
    <pre class="terminal">
    $ uaac member delete my-app.my-scope Adam
    </pre>
