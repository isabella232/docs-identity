---
title: Managing Clients with UAAC
owner: Identity Service
---

This topic explains how plan administrators use the User Account and Authentication Command Line Interface (UAAC)
to create the administrative clients needed to configure UAA resources.  

When app developers configure their apps to use the Single Sign-On (SSO) service,
each app corresponds to a client for a SSO service plan.

Currently, app developers and operators face some limitations when configuring UAA resources not supported by
SSO dashboards. 
For example, multiple grant types cannot be configured using the SSO dashboards.

As a workaround, plan administrators can use the UAAC
to programatically update existing clients.
These operations require administrative access through an admin client that must be configured by an administrator for the SSO service plan.


<p class="note"><strong>Note</strong>: Clients and groups for SSO should be created directly
through the SSO UI or application manifest bootstrapping.
Do not create these through UAAC because additional metadata is required for their usage by SSO.</p>

## <a id="creating"></a> Create a UAA Identity Zone Admin Client

To update clients in your SSO service plan, you need a corresponding UAA identity zone admin client.

To create a UAA identity zone admin client, do the following:

1. Target your Cloud Foundry deployment using `cf`.
1. Target an org and space that your service plan is visible in.
1. Create a service instance named X to do Y.
   For more information, see [Create a Service Instance](./manage-service-instances.html#create-svc-instance).
1. Log in to Service Instance dashboard as an administrator.
   The dashboard URL can be found using Apps Manager or `cf service SERVICE-INSTANCE-NAME`.
1. Click **New App**.
1. Enter an **App Name**.
1. Under **Select an Application Type**, select **Service-to-Service App**.
1. Click **Select Scopes** > **Admin Permissions**.
   Select the scopes necessary for configuring the UAA resource.
   For example, select `clients.admin` when updating UAA clients.
1. Record the **App ID** and **App Secret**.

## <a id="updating"></a> Update Clients with UAAC

For example, plan administrators can add `client credentials` grant type and the corresponding client credentials `authorities` to an existing web-app configured via SSO by performing the following steps:

1. Install the UAAC, `uaac`.
    <pre class="terminal">
    $ gem install cf-uaac
    </pre>


1. To target your service plan, run the following command:

    ```
    uaac target AUTH-DOMAIN
    ```

    Where `AUTH-DOMAIN` is the tenant-specific URL at which the service plan is accessible.  

    For example:

    <pre class="terminal">$ uaac target my-auth-domain.login.example.com  </pre> 


1. To authenticate and obtain an access token for the admin client for your service plan, 
run the following command:

    ```
    uaac token client get ADMIN-APP-ID -s ADMIN-APP-SECRET
    ```

    Where:
    * `ADMIN-APP-ID` is the App ID. 
    * `ADMIN-APP-SECRET` is the App Secret.
   
    Use the App ID and App Secret that you created in 
      [Create a UAA Identity Zone Admin Client](#creating) above.
    For example:

    <pre class="terminal">$ uaac token client get MyAdminAppId -s MyAdminAppSecret </pre>
 
     UAAC stores the token in  `~/.uaac.yml`.


1. To display the client context, run the following command:

    ```
    uaac context
    ```

    For example:

    <pre class="terminal">
    $ uaac context

    [1]*[admin]
        client\_id: MyAdminAppId
        access\_token: aBcdEfg0hIJKlm123.e
        token\_type: bearer
        expires\_in: 43200
        scope: clients.admin
        jti: 91b3-abcd1233
    </pre>

1. Verify that you have the sufficient `clients.admin` permissions under the `scope` section.

1. To obtain the existing configurations of the client, run the following command:


    ```
    uaac client get MY-WEB-APP-ID
    ```

    Where `MY-WEB-APP-ID` is your web app App ID which you can obtain on SSO Developer Dashboard.<br><br>

    For example: 
    <pre class="terminal">
     $ uaac client get MyWebAppId

     scope: openid
     client\_id: MyWebAppId
     resource\_ids: none
     authorized\_grant\_types: authorization\_code refresh\_token
     redirect\_uri: https<span>:</span>//example.com
     access\_token\_validity: 43200
     refresh\_token\_validity: 2592000
     authorities: uaa.resource
     name: test-update
     allowedproviders: uaa google
     type: WEB
     space\_guid: ebd0b512-d94c-49c3-87da-2766e3397a44
     lastmodified: 1529517126000
     created\_by: e10c59d4-8fa4-4905-9ce5-d27e5163f455
    </pre>

1. Confirm that in the output, `client_id` is the value of your web app ID.
    
1. Update the existing client configurations by selectively passing in flags to `uaac client update MY-WEB-APP-ID`.
In this case, add the grant types it should have (e.g. both `authorization_code` for web app) along with the existing grant type(s) (in our example, `client_credentials` and `refresh_token`).
And do the same for the `authorities` an app should be able to use when it logs in via client credentials grant flow (in this example, we give the client the additional ability to access `todo.read` and `todo.write` when acting on its own behalf.)
    <pre class="terminal">
     $ uaac client update MyWebAppId \
       --authorized\_grant\_types \
       authorization\_code,refresh\_token,client\_credentials \
       --authorities todo.read,todo.write

     scope: openid
     client\_id: MyWebAppId
     resource\_ids: none
     authorized\_grant\_types: client\_credentials authorization\_code refresh\_token
     redirect\_uri: https<span>:</span>//google.com
     access\_token\_validity: 43200
     refresh\_token\_validity: 2592000
     authorities: todo.read todo.write
     name: test-update
     allowedproviders: uaa google
     type: WEB
     space\_guid: ebd0b512-d94c-49c3-87da-2766e3397a44
     required\_user\_groups:
     lastmodified: 1529518941000
     created\_by: e10c59d4-8fa4-4905-9ce5-d27e5163f455
    </pre>
In the UAAC response, you can see that your client now has the additional grant types and authorities.

