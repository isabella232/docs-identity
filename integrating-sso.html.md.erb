---
title: Integrating SSO with Your App
owner: Identity Service
---

This topic describes how to integrate SSO with Java and non-Java apps.

## <a id="app-integration"></a>Integrate SSO with an App

Because SSO service is based on the OAuth protocol, any app that uses SSO must be OAuth-aware.

### <a id="app-integration-java"></a>Java Apps 

If you are using Java, see the [Single Sign-On Service Sample Applications](https://github.com/pivotal-cf/identity-sample-apps) repository.
These are sample apps created using [Spring Boot](https://projects.spring.io/spring-boot/) 
for all four [app types](../determine-type.html).
These apps use the SSO Service Connector, which auto-configures the app for OAuth. 
For more information about the SSO Service Connector, see
[spring-cloud-sso-connector](https://github.com/pivotal-cf/spring-cloud-sso-connector)
on GitHub.
For Spring Boot 1.5, you can use [spring-cloud-sso-connector](https://github.com/pivotal-cf/spring-cloud-sso-connector).
And for Spring Boot 2.1, you can use [java-cfenv-boot-pivotal-sso](https://github.com/pivotal-cf/java-cfenv/tree/master/java-cfenv-boot-pivotal-sso).
See the `spring-boot-2.1` and `spring-boot-1.5` branches of the [Single Sign-On Service Sample Applications](https://github.com/pivotal-cf/identity-sample-apps) repository for examples.

After binding the app to an SSO service instance,
you must restart the app for the new SSO configuration to take effect.

### <a id="app-integration-nonjava"></a>Non-Java Apps

To configure non-Java apps for OAuth, supply the following properties as environment 
variables to your app after the SSO service bind.
You can view this information on the **Next Steps** page of the SSO Developer Dashboard.

* **App ID**, also known as OAuth Client ID
* **App Secret**, also known as OAuth Client Secret
* **OAuth Authorization URL**, the endpoint for client authorization
* **OAuth Token URL**, the endpoint for token retrieval

To validate the token, you must verify the following:

1. The token is a properly signed JSON Web Token with an appropriate public key.
   The key can be downloaded from the **Token Verification Key** endpoint specified on the **Next Steps** page.

2. The value of `aud` in the token matches your **App ID**.

3. The value of `iss` matches `https://AUTH-DOMAIN.uaa.YOUR-SYSTEM-DOMAIN/oauth/token`.

4. The expiry time of the token, `exp`, has not passed.

### <a id="login-hint"></a>Login Hints

For PCF v2.2 and later, when making an authorization code, password, or implicit grant request,
a login hint can be provided so that the end user is automatically redirected to the appropriate IDP.

An encoded JSON string containing `origin_key` tied to the origin key of an
identity provider can be provided as a login hint using `login_hint` in a query
parameter. 
For information about login hints,
see the [Authorization Code Grant](http://docs.cloudfoundry.org/api/uaa/version/4.24.0/index.html#authorization-code-grant)
in the UAA API documentation.
