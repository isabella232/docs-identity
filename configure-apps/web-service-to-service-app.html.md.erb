---
title: Web + Service-to-Service App
owner: Identity Service
---

This topic describes the Web + Service-to-Service App Type for Single Sign-On (SSO) for Pivotal Cloud Foundry
(PCF).

## <a id="overview"></a>Overview

The Web + Service-to-Service App Type enables an app to use the following OAuth 2.0 grant types:

+ **Authorization Code:** This grant type is for server-side apps.
See [Authorization Code OAuth 2.0 Grant Type ](#auth) below.
+ **Client Credentials:** This grant type is for apps that can request an access token
and access resources on its own. These apps often use services that call APIs without users.
See [Client Credentials OAuth 2.0 Grant Type](#client-cred) below.

Web and Service-to-Service apps can use both of the above grant types to access resources for users and the app.

## <a id='auth'></a> Authorization Code OAuth 2.0 Grant Type 

The Authorization Code OAuth 2.0 grant type uses the following roles:

- **Resource Owner**: A person or system capable of granting access to a protected resource.
- **Application**: A client that makes protected requests using the authorization of the resource owner.
- **Authorization Server**: The SSO server that issues access tokens to client apps
    after successfully authenticating the resource owner.
- **Resource Server**: The server that hosts protected resources and accepts and
    responds to protected resource requests using access tokens.
    Apps access the server through APIs.

## <a id='auth-code-flow'></a> Authorization Code Flow 

The following diagram describes the flow for the Authorization Code grant type:

<%= image_tag '../images/oauth_auth_code.png' %>

1. **Access Application**: The user accesses the app and triggers authentication and authorization.
2. **Authentication and Request Authorization**: The app prompts the user for their username and password.
     The first time the user goes through this flow for the app, the user sees an approval page.
     On this page, the user can choose permissions to authorize the app to access resources on their behalf.
3. **Authentication and Grant Authorization**: The authorization server receives the authentication and authorization grant.
4. **Send Authentication Code**: After the user authorizes the app, the authorization server sends an authorization code to the app.
5. **Request Code Exchange for Token**: The app receives the authorization code
     and requests an access token from the authorization server.
     This gives the app access to the approved permissions.
6. **Issue Access Token**: The authorization server validates the authorization code and
     issues an access token.
7. **Request Resource w/ Access Token**: The app attempts to access the resource
     from the resource server by presenting the access token.
8. **Return Resource**: If the access token is valid, the resource server returns the resources
     that the user authorized the app to receive.

The resource server runs in PCF under a given space and org.
Developers set the permissions for the resource server API endpoints.
To do this, developers create resources that correspond to API endpoints secured by the SSO service.
Apps can then access these resources on behalf of users.

## <a id='client-cred'></a> Client Credentials OAuth 2.0 Grant Type

The Client Credentials OAuth 2.0 grant type uses the following actors:

- **Application**: A client that makes protected requests using the authorization of the resource owner.
- **Authorization Server**: The SSO server that issues access tokens to client apps
    after successfully authenticating the resource owner.
- **Resource Server**: The server that hosts protected resources and accepts and
    responds to protected resource requests using access tokens.
    Apps access the server through APIs.

## <a id='client-cred-flow'></a> Client Credentials Flow

<%= image_tag '../images/oauth_client_credentials.png' %>

The following diagram describes the flow for the Client Credentials grant type:

1. **Authenticate w/ Client ID and Secret**: The app authenticates with the authorization server
     using its client ID and client secret.
2. **Issue Access Token**: The authorization server validates the client ID and client secret
     and issues an access token.
3. **Request Resource w/ Access Token**: The app attempts to access the resource
     from the resource server by presenting the access token.
4. **Return Resource**: If the access token is valid, the resource server returns the resources to the app.

The resource server runs in PCF under a given space and org.
Developers set the permissions for the resource server API endpoints.
To do this, developers create resources that correspond to API endpoints secured by the SSO service.
Administrators can create admin clients to perform automated management actions without a user.
See <a href="./index.html#admin">Create Admin Client</a>.
